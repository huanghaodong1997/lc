class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        def dfs(node, vis):
            for v in range(len(graph[node])):
                if v not in vis and graph[node][v] == 1:
                    vis.add(v)
                    dfs(v, vis)
        
        visited = set()
        source = set(initial)
        ans = min(initial)
        max_sublen = 0
        for node in range(len(graph)):
            if node not in visited:
                connected = set([node])
                dfs(node, connected)
                infected = connected & source
                if len(infected) == 1:
                    sublen = len(connected)
                    fix_node = list(infected)[0]
                    if sublen > max_sublen or (sublen == max_sublen and fix_node < ans):
                        ans, max_sublen = fix_node, sublen
                visited |= connected
        return ans

#union find
# class Solution:
#     def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
#         n = len(graph)
#         parent = list(range(n))
        
#         def find(node):
#             if parent[node] != node:
#                 parent[node] = find(parent[node])
#             return parent[node]
        
#         def union(node1, node2):
#             root1 = find(node1)
#             root2 = find(node2)
#             if root1 == root2: return
#             parent[root2] = root1
#         for i in range(n):
#             for j in range(i + 1, n):
#                 if graph[i][j] == 1:
#                     union(i, j)
#         area = Counter([find(i) for i in range(n)])
#         malware = Counter([find(i) for i in initial])
#         max_fixed, res = 0, min(initial)
    
#         for i in initial:
#             if malware[find(i)] == 1:
#                 if area[find(i)] > max_fixed:
#                     max_fixed, res = area[find(i)], i
#                 elif area[find(i)] == max_fixed:
#                     res = min(res, i)

#         return res